/*THE CODE WHICH WAS BEING IMPLEMENTED TO SEND MESSAGES VIA GSM MODULE TO THE RESPECTIVE MOBILE PHONE AFTER ACCIDENT DETECTION THROUGH THE ULTRASONIC SENSOR.
ALSO IT WAS BEING USED FOR FIRE ALARM PURPOSE WHERE INCIDENT OCCURS DIRECTLY THE MESSAGE USED TO BE DELIVERED TO THE RESPECTIVE DEVICE*/

int enA = 11;
int in1 = 12;
int in2 = 13;

const int trigPin = 4;
const int echoPin = 5;
float distance = 1.0;

const int x = A0, y = A1, z = A2;
int xv = 0, yv = 0, zv = 0;

#include <TinyGPS.h>
#include<SoftwareSerial.h>
TinyGPS gps;
SoftwareSerial gps_port(2, 3);
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);

char sz[32];
int fr = 10, fv; //fire
int buzzer = 9;
float latitude, longitude;

void setup() {
  Serial.begin(9600);
  pinMode(enA, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(buzzer, OUTPUT);// button
  digitalWrite(buzzer, LOW);
  gps_port.begin(9600);
  delay(2000);
  init_GSM();
  delay(2000);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.println("Welcome");
}

void loop() {
  distance = getDistance(trigPin, echoPin);
  if (distance <= 50) {
    if (distance <= 10) {
      analogWrite(enA, 0);
    } else {
      analogWrite(enA, distance * 10 / 2);
    }
  }
  else {
    analogWrite(enA, 250);
  }
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  encode_gps();
  fire();
  adxl();
  delay(100);
}

float getDistance(int trig, int echo) {
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW);
  float time = pulseIn(echo, HIGH);
  float distance = (time * 0.034) / 2;
  //Serial.println(distance);
  return distance;
}


void Fire_sms()
{
  digitalWrite(buzzer, HIGH);
  Serial.println("AT");
  delay(1000);
  Serial.println("AT+CMGF=1");
  delay(1000);
  Serial.println("AT+CMGS=\"+919972976159\"\r"); // Replace your mobile no here in which you want to receive sms
  analogWrite(enA, 0);
  delay(1000);
  lcd.clear();
  lcd.println("Car Fire Alert");
  delay(2000);
  lcd.clear();
  lcd.print("Sending");
  lcd.setCursor(0, 1);
  lcd.println("Message.....");
  Serial.print("Car Fire Alert at ");
  Serial.print("http://www.google.com/maps/place/");
  delay(1000);
  Serial.print(latitude, 6);
  Serial.print(",");
  Serial.println(longitude, 6);
  delay(1000);
  Serial.print(sz);
  Serial.print(",");
  Serial.println((char)26);//the stopping character
  delay(2000);
  digitalWrite(buzzer, LOW);
}


void Accident_sms()
{
  digitalWrite(buzzer, HIGH);
  Serial.println("AT");
  delay(1000);
  Serial.println("AT+CMGF=1");
  analogWrite(enA, 0);
  delay(1000);
  Serial.println("AT+CMGS=\"+919972976159\"\r");// Replace your mobile no here in which you want to receive sms
  delay(1000);
  lcd.clear();
  lcd.println("Car Accident");
  lcd.setCursor(0, 1);
  lcd.println("Alert");
  delay(2000);
  lcd.clear();
  lcd.print("Sending");
  lcd.setCursor(0, 1);
  lcd.println("Message.....");
  Serial.print("Car Accident Alert at ");
  Serial.print("http://www.google.com/maps/place/");
  delay(1000);
  Serial.print(latitude, 6);
  Serial.print(",");
  Serial.println(longitude, 6);
  delay(1000);
  Serial.print(sz);
  Serial.print(",");
  Serial.println((char)26);
  delay(2000);
  digitalWrite(buzzer, LOW);
}


void encode_gps()
{
  for (unsigned long start = millis(); millis() - start < 1000;)
  {
    while (gps_port.available())
    {
      char a = gps_port.read();
      if (gps.encode(a))
      {
        getgps(gps);
      }
    }
  }
}


void getgps(TinyGPS &gps)
{
  gps.f_get_position(&latitude, &longitude);
  print_date(gps);
}


void init_GSM()
{
  Serial.println("AT");
  delay(2000);
  Serial.println("AT+CMGF=1");
  delay(2000);
}

void adxl()
{
  xv = analogRead(x);
  yv = analogRead(y);
  zv = analogRead(z);

  if ((xv < 280) || (xv > 380) || (yv < 280) || (yv > 380)) // calibrate the accelerometer and put the values here
  {
    Accident_sms();
  }
  else
  {

  }
}

void fire()
{
  fv = digitalRead(fr);
  if (fv == LOW)
  {
    Fire_sms();

  }
  else
  {
    lcd.clear();
    lcd.print("Drive Condition:");
    lcd.setCursor(0, 1);
    lcd.println("Normal");
    delay(10);
  }
  delay(100);
}

static void print_date(TinyGPS &gps)
{
  int year;
  byte month, day, hour, minute, second, hundredths;
  unsigned long age;
  gps.crack_datetime(&year, &month, &day, &hour, &minute, &second, &hundredths, &age);
  if (age == TinyGPS::GPS_INVALID_AGE)
  {

  }
  else
  {
    sprintf(sz, "%02d/%02d/%02d %02d:%02d:%02d ",
            month, day, year, hour, minute, second);
  }
  delay(0);
}
